server:
  port: 8080
mini-db-router:
  jdbc:
    datasource:
      dbCount: 2
      tbCount: 4
      default: db00
      routerKey: uId
      list: db01,db02
      db00:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://8.130.78.210:3306/lucky?useUnicode=true&serverTimezone=Asia/Shanghai
        username: root
        password: 185450844
      db01:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://8.130.78.210:3306/lucky_01?useUnicode=true&serverTimezone=Asia/Shanghai
        username: root
        password: 185450844
      db02:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://8.130.78.210:3306/lucky_02?useUnicode=true&serverTimezone=Asia/Shanghai
        username: root
        password: 185450844

spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  datasource:
    username: root
    password: 185450844
    url: jdbc:mysql://8.130.78.210:3306/lucky?useUnicode=true&serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
    oracleucp:
      min-pool-size: 5
  kafka:
    bootstrap-servers: 8.130.78.210:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 1
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false
  application:
    name: lucky-interfaces-provider
  main:
    allow-circular-references: true
  cloud:
    nacos:
      discovery:
        server-addr: 8.130.78.210:8848
        ip: 8.130.78.210
        username: nacos
        passowrd: nacos

# ----------这个是本地的下面一块是服务器公网的
# xxl-job
# 官网：https://github.com/xuxueli/xxl-job/
# 地址：http://8.130.78.210:7397/xxl-job-admin 【需要先启动 xxl-job】
# 账号：admin
# 密码：123456

#xxl:
#  job:
#    admin:
#      addresses: http://8.130.78.210:7397/xxl-job-admin
#    executor:
#      address:
#      appname: lucky-job
#      ip:
#      port: 9998
#      logpath: /Users/csen/itstack/data/applogs/xxl-job/jobhandler
#      logretentiondays: 50
#    accessToken:


# http://39.96.73.167:7397/xxl-job-admin
# 账号：admin
# 密码：123456
xxl:
  job:
    admin:
      ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
      addresses: http://8.130.78.210:7397/xxl-job-admin
    executor:
      ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册
      appname: lucky-job
      ### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。
      address:
      ### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；
      ip: f4bhis.natappfree.cc
      ### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；
      port: 9999
      logpath: /Users/csen/itstack/data/applogs/xxl-job/jobhandler
      logretentiondays: 50
    accessToken: xdsl3ewi3al1oehxmo68pqxer




mybatis:
  mapper-locations: classpath:/mybatis/mapper/*.xml
  config-location:  classpath:/mybatis/config/mybatis-config.xml

# nacos 配置中心
nacos:
  discovery:
    server-addr: 8.130.78.210:8848
    ip: 8.130.78.210
    username: nacos
    passowrd: nacos

# Dubbo 广播方式配置，如果调用不稳定可以修改为直连模式：https://codechina.csdn.net/KnowledgePlanet/Lucky/-/issues/1
dubbo:
  application:
    name: Lucky
    version: 1.0.0
  registry:
    address: nacos://8.130.78.210:8848
  protocol:
    name: dubbo
    port: -1
#    host: 8.130.78.210
  scan:
    base-packages: cn.sen.lucky.rpc.*
wx:
  config:
    originalid: gh_89e9e6e0eb59
    appid: wxa063ec6e70fe5e9b
    token: bugstack